require("dotenv").config();
const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const fs = require("fs");
const path = require("path");

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();
const PORT = process.env.PORT || 10000;

// ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
const allowedNumbers = new Set([
  "380666004217",
  "380932480426",
  "380991294876",
  "380996200915",
  "380501426662",
  "380509883211",
  "380951040003",
  "380508435192",
  "380983311412",
  "380992951015"
]);

const groupChatId = -1002962297388; // —Ç–≤–æ–π chat_id
const groupInviteLink = "https://t.me/+s8WYdCNs-EgxM2Qy"; // —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É

// ====== JSON –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ======
const dataFile = path.join(__dirname, "verifiedUsers.json");
let verifiedUsers = new Set();
if (fs.existsSync(dataFile)) {
  const raw = fs.readFileSync(dataFile);
  try {
    const arr = JSON.parse(raw);
    verifiedUsers = new Set(arr);
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è verifiedUsers.json:", e);
  }
}

function saveVerifiedUsers() {
  fs.writeFileSync(dataFile, JSON.stringify([...verifiedUsers]));
}

// ====== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ======

// /start ‚Äî –ø—Ä–æ—Å–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
bot.start((ctx) => {
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
    Markup.keyboard([[Markup.button.contactRequest("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º üì≤")]]).oneTime().resize()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on("contact", async (ctx) => {
  const c = ctx.message.contact;
  if (!c || !c.phone_number) return ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.");

  if (typeof c.user_id === "undefined" || c.user_id !== ctx.from.id) {
    return ctx.reply("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç —Ç–≤–æ–π. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.");
  }

  const normalized = c.phone_number.replace(/\D/g, "");
  if (allowedNumbers.has(normalized)) {
    verifiedUsers.add(ctx.from.id);
    saveVerifiedUsers();
    await ctx.reply(`–ù–æ–º–µ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω ‚úÖ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É: ${groupInviteLink}`);
  } else {
    await ctx.reply("–¢–≤–æ–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.");
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
bot.on("chat_member", async (ctx) => {
  const member = ctx.chatMember?.new_chat_member?.user;
  if (!member) return;

  if (!verifiedUsers.has(member.id)) {
    try {
      await ctx.telegram.kickChatMember(ctx.chat.id, member.id);
      console.log(`User ${member.username || member.id} –∫–∏–∫–Ω—É—Ç, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–æ–º–µ—Ä.`);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ:", err);
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
bot.hears("–û—Ç–º–µ–Ω–∞", (ctx) => ctx.reply("–û—Ç–º–µ–Ω–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π /start —Å–Ω–æ–≤–∞."));

// ====== Webhook –¥–ª—è Render ======
app.use(bot.webhookCallback(`/webhook/${process.env.BOT_TOKEN}`));

app.get("/", (req, res) => {
  res.send("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ");
});

// –≤—ã—Å—Ç–∞–≤–ª—è–µ–º webhook —É Telegram
bot.telegram.setWebhook(
  `https://tgbot-9786.onrender.com/webhook/${process.env.BOT_TOKEN}`
);

app.listen(PORT, () => {
  console.log(`Web server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
